version: 2.1

orbs:
  python: circleci/python@0.3.2
  k3d: devopsspiral/k3d@0.1.3
jobs:
  build-and-test:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - python/test
  lint-and-coverage:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - checkout
      - python/install-deps
      - run:
          name: Linter
          command: |
            flake8 src/
            flake8 test/
      - run:
          name: Coverage
          command: |
            coverage run
            coverage report
  test-on-k8s:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build Kubelibrary container image
          command: |
            docker build -t kubelibrary -f testcases/Dockerfile .
      - k3d/k3d-helpers
      - k3d/k3d-up:
          cluster-name: testk3d-2
      - k3d/k3d-run:
          step-name: Prerequisites for 2nd cluster
          command: |
            kubectl create namespace test-ns-2
      - k3d/k3d-up:
          cluster-name: testk3d-1
      - k3d/k3d-run:
          step-name: Run Grafana examples
          command: |
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update
            helm install grafana grafana/grafana -f /repo/testcases/grafana/values.yaml

            sleep 45
            # Grafana tests
            docker run --rm \
            --network container:k3d-${K3D_CLUSTER}-serverlb \
            --volumes-from kubeconfig \
            -e KUBECONFIG=$K3D_KUBECONFIG \
            -e KLIB_POD_PATTERN='grafana.*' \
            -e KLIB_POD_ANNOTATIONS='{"kubelibrary":"testing"}' \
            -e KLIB_POD_NAMESPACE=default \
            kubelibrary -i grafana /testcases/

      - k3d/k3d-run:
          step-name: Run Octopus examples
          command: |
            git clone https://github.com/kyma-incubator/octopus
            docker cp octopus repo:/repo/
            helm install octopus /repo/octopus/chart/octopus/

            # Octopus tests
            docker run --rm \
            --network container:k3d-${K3D_CLUSTER}-serverlb \
            --volumes-from kubeconfig \
            -e KUBECONFIG=$K3D_KUBECONFIG \
            -e KLIB_POD_PATTERN='octopus.*' \
            -e KLIB_RESOURCE_LIMITS_MEMORY=30Mi \
            -e KLIB_RESOURCE_REQUESTS_CPU=100m \
            -e KLIB_POD_LABELS='{"app":"octopus"}' \
            -e KLIB_RESOURCE_LIMITS_CPU=100m \
            -e KLIB_ENV_VARS='{"SECRET_NAME":"webhook-server-secret"}' \
            -e KLIB_POD_NAMESPACE=default \
            -e KLIB_RESOURCE_REQUESTS_MEMORY=20Mi \
            kubelibrary -i octopus /testcases/
      - k3d/k3d-run:
          step-name: Run Other examples
          command: |
            export KLIB_POD_NAMESPACE=kubelib-tests
            kubectl create namespace $KLIB_POD_NAMESPACE
            kubectl label namespaces kubelib-tests test=test
            helm install kubelib-test /repo/test-objects-chart -n $KLIB_POD_NAMESPACE
            sleep 10
            # Other tests
            docker run --rm \
            --network container:k3d-${K3D_CLUSTER}-serverlb \
            --volumes-from kubeconfig \
            -e KUBECONFIG=$K3D_KUBECONFIG \
            -e KLIB_POD_PATTERN='busybox.*' \
            -e KLIB_POD_LABELS='job-name=busybox-job' \
            -e KLIB_POD_NAMESPACE=$KLIB_POD_NAMESPACE \
            kubelibrary -i other /testcases/
      - k3d/k3d-run:
          step-name: Run Multi cluster examples
          command: |
            # Multi cluster tests
            kubectl create namespace test-ns-1
            export KUBE_CONFIG1=/.kube/testk3d-1
            export KUBE_CONFIG2=/.kube/testk3d-2
            export CLUSTER1_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' k3d-testk3d-1-serverlb)
            export CLUSTER1_PORT=$(docker inspect -f '{{(index (index .NetworkSettings.Ports "6443/tcp") 0).HostPort}}' k3d-testk3d-1-serverlb)
            export CLUSTER2_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' k3d-testk3d-2-serverlb)
            export CLUSTER2_PORT=$(docker inspect -f '{{(index (index .NetworkSettings.Ports "6443/tcp") 0).HostPort}}' k3d-testk3d-2-serverlb)
            sed -i "s#0.0.0.0.*#$CLUSTER1_IP:6443#g" ~/.k3d/kubeconfig-testk3d-1.yaml
            sed -i "s#0.0.0.0.*#$CLUSTER2_IP:6443#g" ~/.k3d/kubeconfig-testk3d-2.yaml
            docker cp ~/.k3d/kubeconfig-testk3d-1.yaml kubeconfig:$KUBE_CONFIG1
            docker cp ~/.k3d/kubeconfig-testk3d-2.yaml kubeconfig:$KUBE_CONFIG2
            cat ~/.k3d/kubeconfig-testk3d-1.yaml
            cat ~/.k3d/kubeconfig-testk3d-2.yaml
            docker create --rm -it \
            --network k3d-testk3d-1 \
            --volumes-from kubeconfig \
            -e KUBE_CONFIG1=$KUBE_CONFIG1 \
            -e KUBE_CONFIG2=$KUBE_CONFIG2 \
            --name kubelibrary kubelibrary -i reload-config /testcases/
            docker network connect k3d-testk3d-2 kubelibrary
            docker start -a kubelibrary
  publish-to-pypi:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - checkout
      - run:
          name: Verify setup.py version matches tag
          command: |
            SEMVER="${CIRCLE_TAG:1}"
            grep  version='"'$SEMVER'"' setup.py
            grep  "## \[$SEMVER\]" CHANGELOG.md
      - run:
          name: Publish on Pypi
          command: |
            pip install twine
            python3 setup.py sdist bdist_wheel
            python3 -m twine upload dist/*
workflows:
  main:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - lint-and-coverage:
          filters:
            tags:
              only: /.*/
      - test-on-k8s:
          filters:
            tags:
              only: /.*/
      - publish-to-pypi:
          requires:
            - build-and-test
            - lint-and-coverage
            - test-on-k8s
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
